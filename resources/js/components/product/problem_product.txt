import React, { useEffect, useState } from 'react';
import axios from 'axios';

const ProductManager = () => {
    const [products, setProducts] = useState([]);
    const [categories, setCategories] = useState([]);
    const [product, setProduct] = useState({
        id: null,
        category_id: '',
        product_name: '',
        description: '',
        image: null,
        price: '',
        stock_amount: '',
        status: 'active', // Default to 'active'
    });
    const [isEditing, setIsEditing] = useState(false);
    const [error, setError] = useState('');

    useEffect(() => {
        fetchProducts();
        fetchCategories();
    }, []);

    const fetchProducts = async () => {
        try {
            const response = await axios.get('/api/products');
            console.log(response.data); // Debugging line to check response
            setProducts(response.data);
        } catch (err) {
            console.error("Error fetching products:", err);
        }
    };

    const fetchCategories = async () => {
        try {
            const response = await axios.get('/api/categories');
            setCategories(response.data);
        } catch (err) {
            console.error("Error fetching categories:", err);
        }
    };

    const handleChange = (e) => {
        const { name, value } = e.target;
        setProduct({ ...product, [name]: value });
    };

    const handleFileChange = (e) => {
        setProduct({ ...product, image: e.target.files[0] });
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        const formData = new FormData();
        for (const key in product) {
            formData.append(key, product[key]);
        }

        setError('');

        try {
            if (isEditing) {
                await axios.put(`/api/products/${product.id}`, formData, {
                    headers: { 'Content-Type': 'multipart/form-data' },
                });
            } else {
                await axios.post('/api/products', formData, {
                    headers: { 'Content-Type': 'multipart/form-data' },
                });
            }

            resetForm();
            fetchProducts();
        } catch (err) {
            console.error("Error adding/updating product:", err);
            setError('Error adding/updating product: ' + (err.response?.data?.message || 'Unknown error'));
        }
    };

    const handleEdit = (prod) => {
        setProduct(prod);
        setIsEditing(true);
    };

    const handleDelete = async (id) => {
        if (window.confirm('Are you sure you want to delete this product?')) {
            await axios.delete(`/api/products/${id}`);
            fetchProducts();
        }
    };

    const resetForm = () => {
        setProduct({
            id: null,
            category_id: '',
            product_name: '',
            description: '',
            image: null,
            price: '',
            stock_amount: '',
            status: 'active',
        });
        setIsEditing(false);
    };

    return (
        <div className="container mt-5">
            <h2 className="mb-4">{isEditing ? 'Edit Product' : 'Add Product'}</h2>
            {error && <div className="alert alert-danger">{error}</div>}
            <form onSubmit={handleSubmit} className="mb-4">
                <div className="form-group">
                    <select
                        name="category_id"
                        value={product.category_id}
                        onChange={handleChange}
                        className="form-control mb-3"
                        required
                    >
                        <option value="" disabled>Select Category</option>
                        {categories.map((category) => (
                            <option key={category.id} value={category.id}>
                                {category.name}
                            </option>
                        ))}
                    </select>
                </div>
                <div className="form-group">
                    <input
                        name="product_name"
                        value={product.product_name}
                        onChange={handleChange}
                        className="form-control"
                        placeholder="Product Name"
                        required
                    />
                </div>
                <div className="form-group">
                    <textarea
                        name="description"
                        value={product.description}
                        onChange={handleChange}
                        className="form-control"
                        placeholder="Description"
                    />
                </div>
                <div className="form-group">
                    <input
                        type="file"
                        onChange={handleFileChange}
                        className="form-control"
                    />
                </div>
                <div className="form-group">
                    <input
                        name="price"
                        type="number"
                        value={product.price}
                        onChange={handleChange}
                        className="form-control"
                        placeholder="Price"
                        required
                    />
                </div>
                <div className="form-group">
                    <input
                        name="stock_amount"
                        type="number"
                        value={product.stock_amount}
                        onChange={handleChange}
                        className="form-control"
                        placeholder="Stock Amount"
                        required
                    />
                </div>
                <div className="form-group">
                    <select
                        name="status"
                        value={product.status}
                        onChange={handleChange}
                        className="form-control mb-3"
                    >
                        <option value="active">Active</option>
                        <option value="inactive">Inactive</option>
                    </select>
                </div>
                <button type="submit" className="btn btn-primary">
                    {isEditing ? 'Update Product' : 'Add Product'}
                </button>
                {isEditing && (
                    <button type="button" onClick={resetForm} className="btn btn-secondary ml-2">
                        Cancel
                    </button>
                )}
            </form>

            <h2 className="mb-4">Products List</h2>
            <table className="table table-bordered">
                <thead>
                    <tr>
                        <th>Image</th>
                        <th>Product Name</th>
                        <th>Description</th>
                        <th>Price</th>
                        <th>Stock</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    {products.map((prod) => (
                        <tr key={prod.id}>
                            <td>
                                {prod.image && (
                                    <img
                                        src={`storage/${prod.image}`}
                                        alt={prod.product_name}
                                        style={{ width: '50px', height: '50px' }}
                                    />
                                )}
                            </td>
                            <td>{prod.product_name}</td>
                            <td>{prod.description}</td>
                            <td>{prod.price}</td>
                            <td>{prod.stock_amount}</td>
                            <td>{prod.status}</td> {/* Ensure status is being displayed */}
                            <td>
                                <button onClick={() => handleEdit(prod)} className="btn btn-warning btn-sm mr-2">Edit</button>
                                <button onClick={() => handleDelete(prod.id)} className="btn btn-danger btn-sm">Delete</button>
                            </td>
                        </tr>
                    ))}
                </tbody>
            </table>
        </div>
    );
};

export default ProductManager;
