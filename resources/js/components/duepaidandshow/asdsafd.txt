<?php

namespace App\Http\Controllers;

use App\Models\Order;
use App\Models\OrderItem;
use App\Models\Product;
use App\Models\Category;
use Illuminate\Http\Request;

class OrderReportController extends Controller
{
    // Fetch all Orders
    public function index()
    {
        // Fetch all orders, including their items and category names, sorted by ID in descending order
        $orders = Order::with('items.category')
            ->orderBy('id', 'desc') // Sort by ID in descending order
            ->get();
        return response()->json($orders);
    }

    // Fetch details of a specific order
    public function show($id)
    {
        try {
            // Fetch order along with its related order items and category
            $order = Order::with('items.category')->findOrFail($id); // Eager load category with order items
            return response()->json($order); // Return the order data along with the items
        } catch (\Exception $e) {
            // Return a 404 response if the order is not found
            return response()->json(['error' => 'Order not found'], 404);
        }
    }

    // Fetch due and add due 

    public function getCustomersWithDueAmount()
    {
        // Fetch all orders grouped by customer_number and calculate total due and total paid for each customer
        $customers = Order::select('customer_name', 'customer_address', 'customer_phone', 'customer_number')
            ->selectRaw('SUM(paid_amount) as total_paid_amount')
            ->selectRaw('SUM(due_amount) as total_due_amount')
            ->groupBy('customer_name', 'customer_address', 'customer_phone', 'customer_number')
            ->having('total_due_amount', '>', 0) // Only include customers with a due amount
            ->get();

        return response()->json($customers);
    }

    // Fetch customer details based on phone number
    public function getCustomerDetails(Request $request)
    {
        $validatedData = $request->validate([
            'customer_phone' => 'required|string|max:15',
        ]);

        // Fetch customer details based on phone number
        $customer = Order::where('customer_phone', $validatedData['customer_phone'])
            ->select('customer_name', 'customer_address', 'customer_phone', 'customer_number')
            ->selectRaw('SUM(paid_amount) as total_paid_amount')
            ->selectRaw('SUM(due_amount) as total_due_amount')
            ->groupBy('customer_name', 'customer_address', 'customer_phone', 'customer_number')
            ->first();

        if (!$customer) {
            return response()->json(['message' => 'Customer not found.'], 404);
        }

        return response()->json($customer);
    }

    // Pay due amount for a customer
    public function payDueAmount(Request $request)
    {
        $validatedData = $request->validate([
            'customer_number' => 'required|integer',
            'amount' => 'required|numeric|min:0',
        ]);
    
        try {
            // Find all orders for the customer, ordered by creation date
            $orders = Order::where('customer_number', $validatedData['customer_number'])
                ->orderBy('created_at', 'asc') // Order by the earliest order first
                ->get();
    
            if ($orders->isEmpty()) {
                return response()->json(['message' => 'No orders found for this customer.'], 404);
            }
    
            $remainingAmount = $validatedData['amount']; // Start with the total payment amount
            $updatedOrders = [];
    
            foreach ($orders as $order) {
                if ($remainingAmount <= 0) {
                    break; // Stop if there's no more payment to distribute
                }
    
                // Calculate how much to pay on this order
                $orderDueAmount = $order->due_amount;
                $paymentToApply = min($remainingAmount, $orderDueAmount); // Pay up to the order's due amount
    
                // Update the paid_amount and due_amount
                $order->paid_amount += $paymentToApply;
                $order->due_amount = $order->total_price - $order->paid_amount;
    
                // Update remaining amount to be distributed
                $remainingAmount -= $paymentToApply;
    
                // Save the updated order
                $order->save();
    
                // Collect updated order for the response
                $updatedOrders[] = $order;
            }
    
            // If there is still remaining amount, it means we have overpaid
            if ($remainingAmount > 0) {
                return response()->json(['message' => 'The payment exceeds the due amount.'], 400);
            }
    
            return response()->json(['message' => 'Payment successful', 'updated_orders' => $updatedOrders]);
    
        } catch (\Exception $e) {
            // Log error if something goes wrong
            Log::error('Error updating payment: ' . $e->getMessage());
            return response()->json(['message' => 'An error occurred while processing the payment.'], 500);
        }
    }
    

    
}












import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { Button, Collapse, Form, InputGroup, Table, Modal } from 'react-bootstrap';

const CustomerPaymentPage = () => {
    const [phone, setPhone] = useState('');
    const [customers, setCustomers] = useState([]);
    const [customer, setCustomer] = useState(null);
    const [amountToPay, setAmountToPay] = useState('');
    const [error, setError] = useState(null);
    const [message, setMessage] = useState('');
    const [payDueOpen, setPayDueOpen] = useState(false); // For collapsing input section
    const [filteredCustomers, setFilteredCustomers] = useState([]); // For filtered customers
    const [showModal, setShowModal] = useState(false); // For modal visibility

    // Fetch all customers with due amounts
    useEffect(() => {
        const fetchCustomersWithDue = async () => {
            let isMounted = true; // Flag to track component mounting
            try {
                const response = await axios.get('/api/customers-with-due');
                if (isMounted) {
                    setCustomers(response.data);
                    setFilteredCustomers(response.data);
                    setError(null);
                }
            } catch (err) {
                if (isMounted) {
                    setError('Unable to fetch customers with due amounts.');
                }
            }
            return () => {
                isMounted = false; // Set flag to false when component unmounts
            };
        };

        fetchCustomersWithDue();
    }, []);

    // Handle search by phone number
    const handleSearch = async () => {
        try {
            const response = await axios.get('/api/customer-details', { params: { customer_phone: phone } });
            setCustomer(response.data);
            setError(null);
        } catch (err) {
            setError('Customer not found.');
            setCustomer(null);
        }
    };

    // Handle pay due amount
    const handlePayDue = async () => {
    if (amountToPay <= 0) {
        setError('Enter a valid amount.');
        return;
    }

    try {
        const response = await axios.post('/api/pay-due', {
            customer_number: customer.customer_number,
            amount: amountToPay
        });

        // Ensure the updated order details are applied to the customer state
        setCustomer(prevCustomer => {
            // You may also need to adjust the customer data here based on the API response
            return {
                ...prevCustomer,
                total_paid_amount: response.data.updated_order.total_paid_amount,
                total_due_amount: response.data.updated_order.total_due_amount
            };
        });

        setMessage(response.data.message);
        setAmountToPay('');  // Reset the amount field after payment
        setPayDueOpen(false); // Collapse the input after successful payment
        setError(null);
    } catch (err) {
        setError('Error while processing payment.');
    }
};


    // Handle filter customers based on phone number
    const handleFilterByPhone = () => {
        if (!phone) {
            setFilteredCustomers(customers);
        } else {
            const filtered = customers.filter(customer => customer.customer_phone.includes(phone));
            setFilteredCustomers(filtered);
        }
    };

    return (
        <div className="container mt-5">
            <h1>Customer Payment</h1>

            {/* Search by phone number */}
            <div className="mb-3">
                <InputGroup>
                    <Form.Control
                        type="text"
                        value={phone}
                        onChange={(e) => setPhone(e.target.value)}
                        placeholder="Enter customer phone number"
                    />
                    <Button variant="outline-secondary" onClick={handleFilterByPhone}>Search</Button>
                </InputGroup>
            </div>

            {error && <div className="alert alert-danger">{error}</div>}

            {/* Customers Table with due amounts */}
            <h2 className="mt-4">Customers with Due Amounts</h2>
            <Table striped bordered hover>
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Phone</th>
                        <th>Total Due Amount</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    {filteredCustomers.map((customer, index) => (
                        <tr key={index}>
                            <td>{customer.customer_name}</td>
                            <td>{customer.customer_phone}</td>
                            <td>{customer.total_due_amount}</td>
                            <td>
                                <Button
                                    variant="primary"
                                    onClick={() => {
                                        setCustomer(customer);
                                        setPhone(customer.customer_phone); // Set phone for search input
                                        setShowModal(true); // Show modal when customer is selected
                                    }}
                                >
                                    Pay Due
                                </Button>
                            </td>
                        </tr>
                    ))}
                </tbody>
            </Table>

            {/* Modal for Customer Details and Payment Form */}
            <Modal show={showModal} onHide={() => setShowModal(false)}>
                <Modal.Header closeButton>
                    <Modal.Title>Customer Details</Modal.Title>
                </Modal.Header>
                <Modal.Body>
                    {customer && (
                        <>
                            <Table bordered>
                                <tbody>
                                    <tr>
                                        <td><strong>Name:</strong></td>
                                        <td>{customer.customer_name}</td>
                                    </tr>
                                    <tr>
                                        <td><strong>Address:</strong></td>
                                        <td>{customer.customer_address}</td>
                                    </tr>
                                    <tr>
                                        <td><strong>Phone:</strong></td>
                                        <td>{customer.customer_phone}</td>
                                    </tr>
                                    <tr>
                                        <td><strong>Total Paid Amount:</strong></td>
                                        <td>{customer.total_paid_amount}</td>
                                    </tr>
                                    <tr>
                                        <td><strong>Total Due Amount:</strong></td>
                                        <td>{customer.total_due_amount}</td>
                                    </tr>
                                </tbody>
                            </Table>

                            {/* Pay Due Section */}
                            <Button
                                variant="primary"
                                onClick={() => setPayDueOpen(!payDueOpen)}
                                aria-expanded={payDueOpen}
                                aria-controls="payDueCollapse"
                            >
                                Pay Due
                            </Button>

                            <Collapse in={payDueOpen}>
                                <div id="payDueCollapse" className="mt-3">
                                    <Form>
                                        <Form.Group controlId="amountToPay">
                                            <Form.Label>Enter amount to pay</Form.Label>
                                            <Form.Control
                                                type="number"
                                                value={amountToPay}
                                                onChange={(e) => setAmountToPay(e.target.value)}
                                                placeholder="Amount to pay"
                                            />
                                        </Form.Group>
                                        <Button variant="success" onClick={handlePayDue}>Pay</Button>
                                    </Form>
                                </div>
                            </Collapse>
                        </>
                    )}

                    {message && <div className="alert alert-success mt-3">{message}</div>}
                </Modal.Body>
            </Modal>
        </div>
    );
};

export default CustomerPaymentPage;
